module Module
  def new
    spawn do
      loop({})
    end
  end
end

module Server  
  def self.defined(function)    
    return unless function.public?
    state[:reception] ||= Reception.new
    state[:reception].add_pattern(function.name, function.params) do |*args+|
      
      result = function(*args)
    end
  end
end


module Track
end

module Game
  def loop(state)
    receive
      full? do
        sender:reply(full?)
        loop(state)
      end
      create_game_session(session) do
        game_session = create_game_session(session))
        sender:reply(game_session)
        loop(state[:game_sessions, [game_session|state[:game_sessions]]])
      end
    end
  end
  
  def full?
    state[:game_sessions].length < 4
  end
  
  def create_game_session(session)
    sender:error("Game is full.") if full?
    state[:game_sessions, [GameSession.new|state[:game_sessions]]]
  end
end

module GameSession
  def start
    spawn do
      loop({})
    end
  end

  loop(state)
    
  end
end
