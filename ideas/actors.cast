module Server
  def loop(state)
    receive
      call(name, *arguments)
        handle(state, :call, sender, name, arguments)
      end
      cast(name, *arguments)
        handle(state, :cast, sender, name, arguments)
      end
    end
  end
  
  def handle(state, invocation_type, sender, name, arguments)
    fn = function(name)
    sender:error("No function named #{name}.") unless fn

    case invocation_type
    when :call
      result = fn(*arguments)
      sender:reply(result)
    when :cast
      fn(*arguments)
    end
    loop(state)
  end
    
  def function(name)
    module.function(name)
  end  
end